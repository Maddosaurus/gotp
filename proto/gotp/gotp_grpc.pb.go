// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: gotp/gotp.proto

package gotp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GOTPClient is the client API for GOTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GOTPClient interface {
	ListEntries(ctx context.Context, in *UUID, opts ...grpc.CallOption) (GOTP_ListEntriesClient, error)
	AddEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error)
	UpdateEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error)
	DeleteEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error)
}

type gOTPClient struct {
	cc grpc.ClientConnInterface
}

func NewGOTPClient(cc grpc.ClientConnInterface) GOTPClient {
	return &gOTPClient{cc}
}

func (c *gOTPClient) ListEntries(ctx context.Context, in *UUID, opts ...grpc.CallOption) (GOTP_ListEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GOTP_ServiceDesc.Streams[0], "/gotp.gOTP/ListEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &gOTPListEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GOTP_ListEntriesClient interface {
	Recv() (*OTPEntry, error)
	grpc.ClientStream
}

type gOTPListEntriesClient struct {
	grpc.ClientStream
}

func (x *gOTPListEntriesClient) Recv() (*OTPEntry, error) {
	m := new(OTPEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gOTPClient) AddEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error) {
	out := new(OTPEntry)
	err := c.cc.Invoke(ctx, "/gotp.gOTP/AddEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gOTPClient) UpdateEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error) {
	out := new(OTPEntry)
	err := c.cc.Invoke(ctx, "/gotp.gOTP/UpdateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gOTPClient) DeleteEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error) {
	out := new(OTPEntry)
	err := c.cc.Invoke(ctx, "/gotp.gOTP/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GOTPServer is the server API for GOTP service.
// All implementations must embed UnimplementedGOTPServer
// for forward compatibility
type GOTPServer interface {
	ListEntries(*UUID, GOTP_ListEntriesServer) error
	AddEntry(context.Context, *OTPEntry) (*OTPEntry, error)
	UpdateEntry(context.Context, *OTPEntry) (*OTPEntry, error)
	DeleteEntry(context.Context, *OTPEntry) (*OTPEntry, error)
	mustEmbedUnimplementedGOTPServer()
}

// UnimplementedGOTPServer must be embedded to have forward compatible implementations.
type UnimplementedGOTPServer struct {
}

func (UnimplementedGOTPServer) ListEntries(*UUID, GOTP_ListEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedGOTPServer) AddEntry(context.Context, *OTPEntry) (*OTPEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntry not implemented")
}
func (UnimplementedGOTPServer) UpdateEntry(context.Context, *OTPEntry) (*OTPEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (UnimplementedGOTPServer) DeleteEntry(context.Context, *OTPEntry) (*OTPEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedGOTPServer) mustEmbedUnimplementedGOTPServer() {}

// UnsafeGOTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GOTPServer will
// result in compilation errors.
type UnsafeGOTPServer interface {
	mustEmbedUnimplementedGOTPServer()
}

func RegisterGOTPServer(s grpc.ServiceRegistrar, srv GOTPServer) {
	s.RegisterService(&GOTP_ServiceDesc, srv)
}

func _GOTP_ListEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GOTPServer).ListEntries(m, &gOTPListEntriesServer{stream})
}

type GOTP_ListEntriesServer interface {
	Send(*OTPEntry) error
	grpc.ServerStream
}

type gOTPListEntriesServer struct {
	grpc.ServerStream
}

func (x *gOTPListEntriesServer) Send(m *OTPEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _GOTP_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GOTPServer).AddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gotp.gOTP/AddEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GOTPServer).AddEntry(ctx, req.(*OTPEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _GOTP_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GOTPServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gotp.gOTP/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GOTPServer).UpdateEntry(ctx, req.(*OTPEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _GOTP_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GOTPServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gotp.gOTP/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GOTPServer).DeleteEntry(ctx, req.(*OTPEntry))
	}
	return interceptor(ctx, in, info, handler)
}

// GOTP_ServiceDesc is the grpc.ServiceDesc for GOTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GOTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gotp.gOTP",
	HandlerType: (*GOTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEntry",
			Handler:    _GOTP_AddEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _GOTP_UpdateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _GOTP_DeleteEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEntries",
			Handler:       _GOTP_ListEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gotp/gotp.proto",
}
