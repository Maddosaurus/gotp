// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pallas/pallas.proto

package pallas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtpClient is the client API for Otp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtpClient interface {
	ListEntries(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Otp_ListEntriesClient, error)
	AddEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error)
	UpdateEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error)
	DeleteEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error)
}

type otpClient struct {
	cc grpc.ClientConnInterface
}

func NewOtpClient(cc grpc.ClientConnInterface) OtpClient {
	return &otpClient{cc}
}

func (c *otpClient) ListEntries(ctx context.Context, in *UUID, opts ...grpc.CallOption) (Otp_ListEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Otp_ServiceDesc.Streams[0], "/pallas.otp/ListEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &otpListEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Otp_ListEntriesClient interface {
	Recv() (*OTPEntry, error)
	grpc.ClientStream
}

type otpListEntriesClient struct {
	grpc.ClientStream
}

func (x *otpListEntriesClient) Recv() (*OTPEntry, error) {
	m := new(OTPEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *otpClient) AddEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error) {
	out := new(OTPEntry)
	err := c.cc.Invoke(ctx, "/pallas.otp/AddEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otpClient) UpdateEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error) {
	out := new(OTPEntry)
	err := c.cc.Invoke(ctx, "/pallas.otp/UpdateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otpClient) DeleteEntry(ctx context.Context, in *OTPEntry, opts ...grpc.CallOption) (*OTPEntry, error) {
	out := new(OTPEntry)
	err := c.cc.Invoke(ctx, "/pallas.otp/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtpServer is the server API for Otp service.
// All implementations must embed UnimplementedOtpServer
// for forward compatibility
type OtpServer interface {
	ListEntries(*UUID, Otp_ListEntriesServer) error
	AddEntry(context.Context, *OTPEntry) (*OTPEntry, error)
	UpdateEntry(context.Context, *OTPEntry) (*OTPEntry, error)
	DeleteEntry(context.Context, *OTPEntry) (*OTPEntry, error)
	mustEmbedUnimplementedOtpServer()
}

// UnimplementedOtpServer must be embedded to have forward compatible implementations.
type UnimplementedOtpServer struct {
}

func (UnimplementedOtpServer) ListEntries(*UUID, Otp_ListEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedOtpServer) AddEntry(context.Context, *OTPEntry) (*OTPEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntry not implemented")
}
func (UnimplementedOtpServer) UpdateEntry(context.Context, *OTPEntry) (*OTPEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (UnimplementedOtpServer) DeleteEntry(context.Context, *OTPEntry) (*OTPEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedOtpServer) mustEmbedUnimplementedOtpServer() {}

// UnsafeOtpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtpServer will
// result in compilation errors.
type UnsafeOtpServer interface {
	mustEmbedUnimplementedOtpServer()
}

func RegisterOtpServer(s grpc.ServiceRegistrar, srv OtpServer) {
	s.RegisterService(&Otp_ServiceDesc, srv)
}

func _Otp_ListEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OtpServer).ListEntries(m, &otpListEntriesServer{stream})
}

type Otp_ListEntriesServer interface {
	Send(*OTPEntry) error
	grpc.ServerStream
}

type otpListEntriesServer struct {
	grpc.ServerStream
}

func (x *otpListEntriesServer) Send(m *OTPEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Otp_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServer).AddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pallas.otp/AddEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServer).AddEntry(ctx, req.(*OTPEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Otp_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pallas.otp/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServer).UpdateEntry(ctx, req.(*OTPEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Otp_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTPEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pallas.otp/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServer).DeleteEntry(ctx, req.(*OTPEntry))
	}
	return interceptor(ctx, in, info, handler)
}

// Otp_ServiceDesc is the grpc.ServiceDesc for Otp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Otp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pallas.otp",
	HandlerType: (*OtpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEntry",
			Handler:    _Otp_AddEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Otp_UpdateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Otp_DeleteEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEntries",
			Handler:       _Otp_ListEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pallas/pallas.proto",
}
